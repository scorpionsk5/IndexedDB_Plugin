!function(e){var o=function(){return{dbName:"NewDataBase",tableName:"MyTable",primaryKeyField:"Name",messageHandler:function(e){alert(e)}}},t=function(t){var r=this;r.options=e.extend(!0,{},o(),t||{}),r.indexedDB=window.indexedDB||window.mozIndexedDB||window.webkitIndexedDB||window.msIndexedDB,r.IDBTransaction=window.IDBTransaction||window.webkitIDBTransaction||window.msIDBTransaction,r.IDBKeyRange=window.IDBKeyRange||window.webkitIDBKeyRange||window.msIDBKeyRange,r.indexedDB||r.options.messageHandler("Your browser doesn't support a stable version of IndexedDB.");var n=r.indexedDB.open(r.options.dbName);n.onerror=function(e){r.options.messageHandler(e.target.errorCode)},n.onsuccess=function(e){r.db=event.target.result},n.onupgradeneeded=function(e){var o=e.target.result;o.createObjectStore(r.options.tableName,{keyPath:r.options.primaryKeyField})}};t.prototype.read=function(o){var t=this,r=e.Deferred(),n=t.db.transaction([t.options.tableName]),a=n.objectStore(t.options.tableName),s=a.get(o);return s.onerror=function(e){t.options.messageHandler("Unable to retrieve daa from database! Error: "+e.target.errorCode),r.reject(e.target.errorCode)},s.onsuccess=function(e){r.resolve(s.result)},r.promise()},t.prototype.readAll=function(){var o=this,t=e.Deferred(),r=o.db.transaction(o.options.tableName).objectStore(o.options.tableName),n=[];return r.openCursor().onsuccess=function(e){var o=e.target.result;o?(n.push({Name:o.key,Value:o.value}),o.continue()):t.resolve(n)},t.promise()},t.prototype.add=function(o){var t=this,r=e.Deferred(),n=t.db.transaction([t.options.tableName],"readwrite").objectStore(t.options.tableName).add(o);return n.onsuccess=function(e){r.resolve("Record successfully added.")},n.onerror=function(e){t.options.messageHandler("Unable to add data\r\nRecord aready exist in your database! "),r.reject(e.target.errorCode)},r.promise()},t.prototype.remove=function(o){var t=this,r=e.Deferred(),n=t.db.transaction([t.options.tableName],"readwrite").objectStore(t.options.tableName).delete(o);return n.onsuccess=function(e){r.resolve(o+" entry has been removed from your database.")},r.promise()},t.prototype.clear=function(){var o=this,t=e.Deferred(),r=o.db.transaction([o.options.tableName],"readwrite").objectStore(o.options.tableName).clear();return r.onsuccess=function(e){t.resolve("All entries has been cleared from your database.")},r.onerror=function(){t.reject("")},t.promise()},t.prototype.deleteDB=function(){var o,t=this,r=e.Deferred(),n="";return t.db.close(),o=t.indexedDB.deleteDatabase(t.options.dbName),o.onsuccess=function(){n="Deleted database successfully",t.options.messageHandler(n),r.resolve(n)},o.onerror=function(){n="Couldn't delete database",t.options.messageHandler(n),r.reject(n)},o.onblocked=function(){n="Couldn't delete database due to the operation being blocked",t.options.messageHandler(n),r.reject(n)},r.promise()},window.idb=t}(jQuery);